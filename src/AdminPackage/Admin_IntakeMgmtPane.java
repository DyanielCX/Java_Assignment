package AdminPackage;

import ProjManagerPackage.StuAssesElem.IntakeBasedMethod;
import ProjManagerPackage.StuAssesElem.ModernScrollBarUI;
import ProjManagerPackage.StuAssesElem.TableActionCellEditor_EditButton;
import ProjManagerPackage.StuAssesElem.TableActionCellRender_EditButton;
import ProjManagerPackage.StuAssesElem.TableHeader;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import ProjManagerPackage.StuAssesElem.TableActionEvent_EditButton;
import javax.swing.JOptionPane;


public class Admin_IntakeMgmtPane extends javax.swing.JPanel {

    private Admin_MainFrame mainFrame;
    
    public Admin_IntakeMgmtPane(Admin_MainFrame mainFrame) {
        this.mainFrame = mainFrame;
        initComponents();
        
        //Customize Table Modification
        /* Set the scrollbar to customize scrollbar*/
        fixTable(jScrollPane1);
        
        /* Set the header to customize header */
        IntakeAssTable.getTableHeader().setReorderingAllowed(false);
        IntakeAssTable.getTableHeader().setResizingAllowed(false);
        IntakeAssTable.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object o, boolean isSelected, boolean hasFocus, int row, int column) {
                TableHeader header = new TableHeader(o + "");
                return header;
            }
        });

        
        //Insert data into table
        /*Show the intake haven't been alloted assesment*/
        ArrayList<String> intakeList = IntakeBasedMethod.getIntake();
        
        for (String intake : intakeList){
            String assessment = IntakeBasedMethod.getAssessment(intake);
            
            if (assessment.equals("-")) {
                Object[] InsertRow = {intake, assessment};

                DefaultTableModel model = (DefaultTableModel) IntakeAssTable.getModel();
                model.addRow(InsertRow);
            }
        }
        
        /*Show the intake have been alloted assesment*/
        for (String intake : intakeList){
            String assessment = IntakeBasedMethod.getAssessment(intake);
            
            if (!assessment.equals("-")) {
                Object[] InsertRow = {intake, assessment};

                DefaultTableModel model = (DefaultTableModel) IntakeAssTable.getModel();
                model.addRow(InsertRow);
            }
        }
        
        /*Set the edit button and its function*/
        TableActionEvent_EditButton event = new TableActionEvent_EditButton() {
            @Override
            public void onEdit(int row) {
                //Get the student id of selected student
                String selectedIntake = (String) IntakeAssTable.getValueAt(row, 0);
                mainFrame.dispose();
                
                Admin_EditIntakeFrame editPage = new Admin_EditIntakeFrame(selectedIntake);
                editPage.setVisible(true);
            }
        };
        
        //Insert edit button into table
        IntakeAssTable.getColumnModel().getColumn(2).setCellRenderer(new TableActionCellRender_EditButton());
        IntakeAssTable.getColumnModel().getColumn(2).setCellEditor(new TableActionCellEditor_EditButton(event));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        IntakeAssTable = new javax.swing.JTable();
        TabTitle = new javax.swing.JLabel();
        btbNewIntake = new javax.swing.JPanel();
        lblNewIntake = new javax.swing.JLabel();

        IntakeAssTable.setFont(new java.awt.Font("Dubai Medium", 0, 20)); // NOI18N
        IntakeAssTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Intake", "Assessment", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        IntakeAssTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        IntakeAssTable.setRowHeight(40);
        jScrollPane1.setViewportView(IntakeAssTable);

        TabTitle.setFont(new java.awt.Font("Dubai Medium", 0, 24)); // NOI18N
        TabTitle.setText("Intake List");

        btbNewIntake.setBackground(new java.awt.Color(255, 255, 255));
        btbNewIntake.setForeground(new java.awt.Color(255, 255, 255));
        btbNewIntake.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btbNewIntakeMouseClicked(evt);
            }
        });

        lblNewIntake.setFont(new java.awt.Font("Dubai Medium", 0, 18)); // NOI18N
        lblNewIntake.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/AdminAddBtb.png"))); // NOI18N
        lblNewIntake.setText("New");
        lblNewIntake.setIconTextGap(12);

        javax.swing.GroupLayout btbNewIntakeLayout = new javax.swing.GroupLayout(btbNewIntake);
        btbNewIntake.setLayout(btbNewIntakeLayout);
        btbNewIntakeLayout.setHorizontalGroup(
            btbNewIntakeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btbNewIntakeLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblNewIntake, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        btbNewIntakeLayout.setVerticalGroup(
            btbNewIntakeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btbNewIntakeLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(lblNewIntake)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(TabTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 588, Short.MAX_VALUE)
                .addComponent(btbNewIntake, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TabTitle)
                    .addComponent(btbNewIntake, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btbNewIntakeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btbNewIntakeMouseClicked
        // Create a dialog to get user input
        String newIntake = JOptionPane.showInputDialog(this, "Enter new intake", "Create New Intake", JOptionPane.INFORMATION_MESSAGE);
        
        if (newIntake != null && !newIntake.isEmpty()){
            Admin.addNewIntake(newIntake);
        }

        // Refresh the intake list
        mainFrame.updateIntakeMgmtPane(mainFrame);
        int tabIndex = mainFrame.TabPanel.getTabCount()-1;
        mainFrame.changedTab(tabIndex);
    }//GEN-LAST:event_btbNewIntakeMouseClicked

    /* Customize the scrollbar for table */
    public void fixTable (JScrollPane scroll){
        scroll.getViewport().setBackground(Color.WHITE);
        
        JScrollBar verticalScrollBar = scroll.getVerticalScrollBar();
        verticalScrollBar.setUI(new ModernScrollBarUI());

        // Set other properties of the vertical scroll bar
        verticalScrollBar.setPreferredSize(new Dimension(3, 5));
        verticalScrollBar.setForeground(new Color(71, 105, 231, 178));
        verticalScrollBar.setUnitIncrement(20);
        verticalScrollBar.setOpaque(false);
        
        JPanel p = new JPanel();
        p.setBackground(Color.WHITE);
        scroll.setCorner(JScrollPane.UPPER_RIGHT_CORNER, p);
        scroll.setBorder(new EmptyBorder(5, 10, 5, 10));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable IntakeAssTable;
    private javax.swing.JLabel TabTitle;
    private javax.swing.JPanel btbNewIntake;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNewIntake;
    // End of variables declaration//GEN-END:variables
}
